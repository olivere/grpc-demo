// Code generated by protoc-gen-go. DO NOT EDIT.
// source: example.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	example.proto

It has these top-level messages:
	HelloRequest
	HelloResponse
	TickerRequest
	TickerResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Gender is an example of enumeration values in proto.
type Gender int32

const (
	Gender_UNSPECIFIED Gender = 0
	Gender_MALE        Gender = 1
	Gender_FEMALE      Gender = 2
)

var Gender_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "MALE",
	2: "FEMALE",
}
var Gender_value = map[string]int32{
	"UNSPECIFIED": 0,
	"MALE":        1,
	"FEMALE":      2,
}

func (x Gender) String() string {
	return proto.EnumName(Gender_name, int32(x))
}
func (Gender) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// HelloRequest is a simple RPC request.
type HelloRequest struct {
	Name       string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Age        int32             `protobuf:"varint,2,opt,name=age" json:"age,omitempty"`
	Nanos      int64             `protobuf:"varint,3,opt,name=nanos" json:"nanos,omitempty"`
	Tags       []string          `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
	Properties map[string]string `protobuf:"bytes,5,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Gender     Gender            `protobuf:"varint,6,opt,name=gender,enum=com.altf4.grpc.Gender" json:"gender,omitempty"`
	Online     bool              `protobuf:"varint,7,opt,name=online" json:"online,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HelloRequest) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *HelloRequest) GetNanos() int64 {
	if m != nil {
		return m.Nanos
	}
	return 0
}

func (m *HelloRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *HelloRequest) GetProperties() map[string]string {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *HelloRequest) GetGender() Gender {
	if m != nil {
		return m.Gender
	}
	return Gender_UNSPECIFIED
}

func (m *HelloRequest) GetOnline() bool {
	if m != nil {
		return m.Online
	}
	return false
}

// HelloResponse is a simple RPC response.
type HelloResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *HelloResponse) Reset()                    { *m = HelloResponse{} }
func (m *HelloResponse) String() string            { return proto.CompactTextString(m) }
func (*HelloResponse) ProtoMessage()               {}
func (*HelloResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HelloResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// TickerRequest initiates the streaming Ticker API.
type TickerRequest struct {
	Timezone string `protobuf:"bytes,1,opt,name=timezone" json:"timezone,omitempty"`
	Interval int64  `protobuf:"varint,2,opt,name=interval" json:"interval,omitempty"`
}

func (m *TickerRequest) Reset()                    { *m = TickerRequest{} }
func (m *TickerRequest) String() string            { return proto.CompactTextString(m) }
func (*TickerRequest) ProtoMessage()               {}
func (*TickerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TickerRequest) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *TickerRequest) GetInterval() int64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

// TickerResponse is a response sent back from the server to the client,
// in a streaming manner.
type TickerResponse struct {
	Tick string `protobuf:"bytes,1,opt,name=tick" json:"tick,omitempty"`
}

func (m *TickerResponse) Reset()                    { *m = TickerResponse{} }
func (m *TickerResponse) String() string            { return proto.CompactTextString(m) }
func (*TickerResponse) ProtoMessage()               {}
func (*TickerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TickerResponse) GetTick() string {
	if m != nil {
		return m.Tick
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "com.altf4.grpc.HelloRequest")
	proto.RegisterType((*HelloResponse)(nil), "com.altf4.grpc.HelloResponse")
	proto.RegisterType((*TickerRequest)(nil), "com.altf4.grpc.TickerRequest")
	proto.RegisterType((*TickerResponse)(nil), "com.altf4.grpc.TickerResponse")
	proto.RegisterEnum("com.altf4.grpc.Gender", Gender_name, Gender_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Example service

type ExampleClient interface {
	// Hello is a simple request/response call, similar to HTTP REST APIs.
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	// Ticker is a streaming API, where the client initiates the stream
	// and then receives and endless stream of responses.
	Ticker(ctx context.Context, in *TickerRequest, opts ...grpc.CallOption) (Example_TickerClient, error)
}

type exampleClient struct {
	cc *grpc.ClientConn
}

func NewExampleClient(cc *grpc.ClientConn) ExampleClient {
	return &exampleClient{cc}
}

func (c *exampleClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := grpc.Invoke(ctx, "/com.altf4.grpc.Example/Hello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) Ticker(ctx context.Context, in *TickerRequest, opts ...grpc.CallOption) (Example_TickerClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Example_serviceDesc.Streams[0], c.cc, "/com.altf4.grpc.Example/Ticker", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleTickerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Example_TickerClient interface {
	Recv() (*TickerResponse, error)
	grpc.ClientStream
}

type exampleTickerClient struct {
	grpc.ClientStream
}

func (x *exampleTickerClient) Recv() (*TickerResponse, error) {
	m := new(TickerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Example service

type ExampleServer interface {
	// Hello is a simple request/response call, similar to HTTP REST APIs.
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	// Ticker is a streaming API, where the client initiates the stream
	// and then receives and endless stream of responses.
	Ticker(*TickerRequest, Example_TickerServer) error
}

func RegisterExampleServer(s *grpc.Server, srv ExampleServer) {
	s.RegisterService(&_Example_serviceDesc, srv)
}

func _Example_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.altf4.grpc.Example/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_Ticker_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TickerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExampleServer).Ticker(m, &exampleTickerServer{stream})
}

type Example_TickerServer interface {
	Send(*TickerResponse) error
	grpc.ServerStream
}

type exampleTickerServer struct {
	grpc.ServerStream
}

func (x *exampleTickerServer) Send(m *TickerResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Example_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.altf4.grpc.Example",
	HandlerType: (*ExampleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _Example_Hello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ticker",
			Handler:       _Example_Ticker_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "example.proto",
}

func init() { proto.RegisterFile("example.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 422 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xed, 0xda, 0x89, 0x93, 0x4e, 0x49, 0x1a, 0x8d, 0x50, 0x64, 0x45, 0x80, 0x2c, 0x8b, 0x83,
	0x41, 0xc8, 0xa0, 0xc0, 0x01, 0x21, 0x71, 0xe0, 0xc3, 0x29, 0x15, 0x05, 0x45, 0x0b, 0x5c, 0xb8,
	0xb9, 0x61, 0x88, 0xac, 0xd8, 0xbb, 0x66, 0x77, 0x5b, 0x51, 0x7e, 0x0c, 0x7f, 0x82, 0x3f, 0x88,
	0xd6, 0x6b, 0x47, 0x6d, 0x50, 0xb8, 0xbd, 0xa7, 0x99, 0x9d, 0x79, 0xef, 0xed, 0xc0, 0x88, 0x7e,
	0xe6, 0x55, 0x5d, 0x52, 0x5a, 0x2b, 0x69, 0x24, 0x8e, 0x57, 0xb2, 0x4a, 0xf3, 0xd2, 0x7c, 0x7f,
	0x96, 0xae, 0x55, 0xbd, 0x8a, 0xff, 0x78, 0x70, 0xeb, 0x1d, 0x95, 0xa5, 0xe4, 0xf4, 0xe3, 0x82,
	0xb4, 0x41, 0x84, 0x9e, 0xc8, 0x2b, 0x0a, 0x59, 0xc4, 0x92, 0x43, 0xde, 0x60, 0x9c, 0x80, 0x9f,
	0xaf, 0x29, 0xf4, 0x22, 0x96, 0xf4, 0xb9, 0x85, 0x78, 0x1b, 0xfa, 0x22, 0x17, 0x52, 0x87, 0x7e,
	0xc4, 0x12, 0x9f, 0x3b, 0x62, 0xdf, 0x9a, 0x7c, 0xad, 0xc3, 0x5e, 0xe4, 0xdb, 0xb7, 0x16, 0xe3,
	0x19, 0x40, 0xad, 0x64, 0x4d, 0xca, 0x14, 0xa4, 0xc3, 0x7e, 0xe4, 0x27, 0x47, 0xf3, 0x47, 0xe9,
	0x4d, 0x15, 0xe9, 0x75, 0x05, 0xe9, 0x72, 0xdb, 0x9e, 0x09, 0xa3, 0xae, 0xf8, 0xb5, 0xf7, 0x98,
	0x42, 0xb0, 0x26, 0xf1, 0x8d, 0x54, 0x18, 0x44, 0x2c, 0x19, 0xcf, 0xa7, 0xbb, 0x93, 0x4e, 0x9a,
	0x2a, 0x6f, 0xbb, 0x70, 0x0a, 0x81, 0x14, 0x65, 0x21, 0x28, 0x1c, 0x44, 0x2c, 0x19, 0xf2, 0x96,
	0xcd, 0x5e, 0xc2, 0xf1, 0xce, 0x1a, 0x6b, 0x72, 0x43, 0x57, 0xad, 0x6f, 0x0b, 0xad, 0xc9, 0xcb,
	0xbc, 0xbc, 0x70, 0xc6, 0x0f, 0xb9, 0x23, 0x2f, 0xbc, 0xe7, 0x2c, 0x7e, 0x00, 0xa3, 0x56, 0xb2,
	0xae, 0xa5, 0xd0, 0x84, 0x21, 0x0c, 0x2a, 0xd2, 0xda, 0xa6, 0xe4, 0x06, 0x74, 0x34, 0x3e, 0x81,
	0xd1, 0xe7, 0x62, 0xb5, 0x21, 0xd5, 0x05, 0x3c, 0x83, 0xa1, 0x29, 0x2a, 0xfa, 0x25, 0x45, 0xd7,
	0xbb, 0xe5, 0xb6, 0x56, 0x08, 0x43, 0xea, 0x32, 0x2f, 0x9b, 0xa5, 0x3e, 0xdf, 0xf2, 0xf8, 0x3e,
	0x8c, 0xbb, 0x41, 0xed, 0x52, 0x1b, 0x77, 0xb1, 0xda, 0x74, 0x5f, 0x65, 0xf1, 0xc3, 0xc7, 0x10,
	0xb8, 0x08, 0xf0, 0x18, 0x8e, 0xbe, 0x7c, 0xfc, 0xb4, 0xcc, 0xde, 0x9c, 0x2e, 0x4e, 0xb3, 0xb7,
	0x93, 0x03, 0x1c, 0x42, 0xef, 0xc3, 0xab, 0xb3, 0x6c, 0xc2, 0x10, 0x20, 0x58, 0x64, 0x0d, 0xf6,
	0xe6, 0xbf, 0x19, 0x0c, 0x32, 0x77, 0x22, 0xb8, 0x80, 0x7e, 0x63, 0x0b, 0xef, 0xfc, 0xef, 0x83,
	0x66, 0x77, 0xf7, 0x54, 0x9d, 0xac, 0xf8, 0x00, 0xdf, 0x43, 0xe0, 0xa4, 0xe2, 0x3f, 0xad, 0x37,
	0xb2, 0x98, 0xdd, 0xdb, 0x57, 0xee, 0x46, 0x3d, 0x61, 0xaf, 0xa7, 0xb0, 0x73, 0xb3, 0x4b, 0xf6,
	0xd5, 0xab, 0xcf, 0xcf, 0x83, 0xe6, 0xa0, 0x9f, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x74, 0xa5,
	0xd8, 0xe0, 0xe1, 0x02, 0x00, 0x00,
}
